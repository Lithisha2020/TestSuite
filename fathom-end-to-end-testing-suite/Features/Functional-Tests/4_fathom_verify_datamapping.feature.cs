// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace fathom_end_to_end_testing_suite.Features.Functional_Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class _4_Fathom_Verify_DatamappingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "4_fathom_verify_datamapping.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "4_fathom_verify_datamapping", "\tAs a fathom client\r\n\tI want the ability to map my data to custom labels\r\n\tSo tha" +
                    "t I can standardize the names for reporting", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "4_fathom_verify_datamapping")))
            {
                global::fathom_end_to_end_testing_suite.Features.Functional_Tests._4_Fathom_Verify_DatamappingFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("an authentication token is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void _1_RIOTestCaseForDataMapping(string test_Case_Scenario, string request_Variable_Data, string response_Variable_Data, string updated_Datamap_File, string updated_Datamap_Loadfile_Settings, string request_Variable_Data_Datamap_Verification, string response_Variable_Data_Mapping, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "functional_test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1_RIO test case for data mapping", null, @__tags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given(string.Format("existing dataset for {0}", test_Case_Scenario), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given(string.Format("a variable data request is created for {0}", request_Variable_Data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("variable data request is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When(string.Format("I get the variable data in an excel for {0}", response_Variable_Data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.When("I update the data mapping", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.When(string.Format("upload the data map file with {0} and {1}", updated_Datamap_Loadfile_Settings, updated_Datamap_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.When("the file is loaded with loaderId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then(string.Format("a variable data request is created for {0}", request_Variable_Data_Datamap_Verification), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.Then("variable data request is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.Then(string.Format("I should get the variables data for the data mapped variables for {0}", response_Variable_Data_Mapping), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("1_RIO test case for data mapping: 1-2-file-cmplus-cmcomms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "4_fathom_verify_datamapping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("functional_test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1-2-file-cmplus-cmcomms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:test_case_scenario", "1-2-file-cmplus-cmcomms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:request_variable_data", "request_variable_data_wildcard_matching_csv_format.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:response_variable_data", "response_variable_data_wildcard_matching_csv_format.csv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:updated_datamap_file", "response_variable_data_wildcard_matching_csv_format.csv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:updated_datamap_loadfile_settings", "loadfilesettings_reload_datamap.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:request_variable_data_datamap_verification", "request_variable_data_wildcard_datamap_current.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:response_variable_data_mapping", "response_variable_data_wildcard_matching_csv_format.csv")]
        public virtual void _1_RIOTestCaseForDataMapping_1_2_File_Cmplus_Cmcomms()
        {
#line 10
this._1_RIOTestCaseForDataMapping("1-2-file-cmplus-cmcomms", "request_variable_data_wildcard_matching_csv_format.json", "response_variable_data_wildcard_matching_csv_format.csv", "response_variable_data_wildcard_matching_csv_format.csv", "loadfilesettings_reload_datamap.txt", "request_variable_data_wildcard_datamap_current.json", "response_variable_data_wildcard_matching_csv_format.csv", ((string[])(null)));
#line hidden
        }
        
        public virtual void _2_RIOTestCaseForNewDataMapping(string test_Case_Scenario, string template_File, string datafiles, string loadsettingsfiles, string request_Variable_Data, string response_Variable_Data, string updated_Datamap_File, string updated_Datamap_Loadfile_Settings, string request_Variable_Data_Datamap_Verification, string response_Variable_Data_Mapping, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "functional_test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_RIO test case for new data mapping", null, @__tags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 29
 testRunner.Given(string.Format("a new dataset for {0} with {1} for {2} and {3}", test_Case_Scenario, template_File, datafiles, loadsettingsfiles), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.Given("I load data file and they are loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("2_RIO test case for new data mapping: 1-3-files-survery-media-sales-search-rdata")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "4_fathom_verify_datamapping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("functional_test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1-3-files-survery-media-sales-search-rdata")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:test_case_scenario", "1-3-files-survery-media-sales-search-rdata")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:template_file", "FathomTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:datafiles", "Akzo Base Text Cube File_TL.csv,MEDIA Akzo Base Test File_TL.xlsx,SALES Akzo Base" +
            " Test File.xlsx,SEARCH file Akzo Nobel UK.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:loadsettingsfiles", "Loadfilesettings_Akzo Base Text Cube File_TL.txt,Loadfilesettings_MEDIA Akzo Base" +
            " Test File_TL.txt,Loadfilesettings_SALES Akzo Base Test File.txt,Loadfilesetting" +
            "s_SEARCH file Akzo Nobel UK.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:request_variable_data", "request_variable_data_wildcard_matching_csv_format.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:response_variable_data", "response_variable_data_wildcard_matching_csv_format.csv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:updated_datamap_file", "response_variable_data_wildcard_matching_csv_format.csv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:updated_datamap_loadfile_settings", "loadfilesettings_reload_datamap.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:request_variable_data_datamap_verification", "request_variable_data_wildcard_datamap_current.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:response_variable_data_mapping", "response_variable_data_wildcard_matching_csv_format.csv")]
        public virtual void _2_RIOTestCaseForNewDataMapping_1_3_Files_Survery_Media_Sales_Search_Rdata()
        {
#line 28
this._2_RIOTestCaseForNewDataMapping("1-3-files-survery-media-sales-search-rdata", "FathomTemplate", "Akzo Base Text Cube File_TL.csv,MEDIA Akzo Base Test File_TL.xlsx,SALES Akzo Base" +
                    " Test File.xlsx,SEARCH file Akzo Nobel UK.xlsx", "Loadfilesettings_Akzo Base Text Cube File_TL.txt,Loadfilesettings_MEDIA Akzo Base" +
                    " Test File_TL.txt,Loadfilesettings_SALES Akzo Base Test File.txt,Loadfilesetting" +
                    "s_SEARCH file Akzo Nobel UK.txt", "request_variable_data_wildcard_matching_csv_format.json", "response_variable_data_wildcard_matching_csv_format.csv", "response_variable_data_wildcard_matching_csv_format.csv", "loadfilesettings_reload_datamap.txt", "request_variable_data_wildcard_datamap_current.json", "response_variable_data_wildcard_matching_csv_format.csv", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
